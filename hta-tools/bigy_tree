#!/usr/bin/python
#
# An SNP tree builder using the Big Y data files from the U106 project.
#
#
import argparse
import collections
import csv
import sys

import bigy_snp


def print_subtree(kitset, level, spacer, print_people):
  subclades = kitset.subclade_candidates(minimum_subclade=2)
  if print_people:
    not_subclades = set(kitset.persons.keys())
    for candidate in subclades:
      people = kitset.filter(candidate)
      not_subclades -= set(people.persons.keys())
    for personkey in not_subclades:
      print ':%s %s' % (spacer * (3 * level), personkey)
  for candidate in subclades:
    people = kitset.filter(candidate)
    print ':%s +--%s: %d [%s]' % (spacer * (3 * level), candidate, people.count(),
                                  ' '.join(subclades[candidate]))
    print_subtree(people, level + 1, spacer, print_people)


def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('snp', default='Z159', nargs='?')
  parser.add_argument('--file', default='bigy-531.csv')
  parser.add_argument('--dots', action='store_true')
  parser.add_argument('--people', action='store_true')
  args = parser.parse_args()

  kitset = bigy_snp.load_spreadsheet(args.file)
  print 'File count:', kitset.count()
  if args.snp == 'all':
    filtered = kitset
  else:
    filtered = kitset.filter(args.snp)
  print args.snp, 'Filtered count:', filtered.count()
  print 'SNPs: ', len(filtered.snps())
  if args.dots:
    print_subtree(filtered, 0, spacer='.', print_people=args.people)
  else:
    print_subtree(filtered, 0, spacer=' ', print_people=args.people)

if __name__ == '__main__':
  sys.exit(main())
